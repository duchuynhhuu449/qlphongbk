const Room = require("../../models/room");
const { formatDateTime, getHolidayDays } = require("./timeUtils");

const handleRoomCommand = async(roomNumberInput,regex) => {
  const roomNumber = parseInt(roomNumberInput);
  const dataRoom = await Room.findOne({roomNumber: roomNumber});

  if (!dataRoom) return "‚ùå Kh√¥ng t√¨m th·∫•y ph√≤ng.";

  

  const now = new Date();

  if(regex == "r") {
    dataRoom.checkInDate = "";
    await dataRoom.save();
    return `Ph√≤ng ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng`
  }

  if (!dataRoom.checkInDate) {
    // N·∫øu ch∆∞a nh·∫≠n ph√≤ng th√¨ c·∫≠p nh·∫≠t ng√†y nh·∫≠n l√† th·ªùi gian hi·ªán t·∫°i
    dataRoom.checkInDate = formatDateTime(now);
    await dataRoom.save();
    return `‚úÖ ƒê√£ c·∫≠p nh·∫≠t ng√†y nh·∫≠n ph√≤ng cho ph√≤ng ${roomNumber} l√† ${formatDateTime(now)}`;
  }

 


  const start = new Date(dataRoom.checkInDate);
  const end = now;

  if (end <= start) {
    return "‚ùå Th·ªùi gian tr·∫£ ph·∫£i sau th·ªùi gian nh·∫≠n.";
  }

  const diffMs = end - start;
  const diffMinutes = Math.ceil(diffMs / 60000);
  const diffHours = Math.ceil(diffMs / 3600000);
  const startHour = start.getHours();
  const endHour = end.getHours();
  const isSameDay = start.toDateString() === end.toDateString();
  const isNightStay =
    startHour >= 19 &&
    startHour <= 23 &&
    endHour >= 0 &&
    endHour <= 2 &&
    diffHours <= 9;

  let total = 0;
  const notes = [];

  const holidays = {
    "01-01": "T·∫øt D∆∞∆°ng L·ªãch",
    "30-04": "Gi·∫£i ph√≥ng mi·ªÅn Nam",
    "01-05": "Qu·ªëc t·∫ø Lao ƒë·ªông",
    "02-09": "Qu·ªëc kh√°nh",
  };

  let surcharge = 0;
  let holidaySurcharge = 0;
  let holidayHours = 0;

  if (isSameDay || isNightStay) {
    // T√≠nh theo gi·ªù
    total = dataRoom.firstHour;
    notes.push(`Gi·ªù ƒë·∫ßu: ${dataRoom.firstHour.toLocaleString()} VNƒê`);

    const extraMinutes = diffMinutes - 60;
    const extraHoursCharged =
      extraMinutes > 0 ? Math.floor((extraMinutes + 45) / 60) : 0;

    if (extraHoursCharged > 0) {
      let temp = new Date(start);
      temp.setMinutes(temp.getMinutes() + 60);

      let totalExtraHourSurcharge = 0;
      let holidayHourCount = 0;

      for (let i = 0; i < extraHoursCharged; i++) {
        const currentStr = temp
          .toLocaleDateString("vi-VN", { day: "2-digit", month: "2-digit" })
          .replace(/\//g, "-");

        const isHoliday = holidays[currentStr];
        const hourPrice = dataRoom.extraHour + (isHoliday ? 10000 : 0);
        totalExtraHourSurcharge += hourPrice;
        if (isHoliday) holidayHourCount++;

        temp.setHours(temp.getHours() + 1);
      }

      notes.push(
        `Ph·ª• thu: ${extraHoursCharged} gi·ªù x ${dataRoom.extraHour.toLocaleString()} VNƒê ${
          holidayHourCount ? `(Ng√†y l·ªÖ: ${holidayHourCount} gi·ªù)` : ""
        } = ${totalExtraHourSurcharge.toLocaleString()} VNƒê`
      );

      total += totalExtraHourSurcharge;
    }
  } else {
    // Qua ƒë√™m
    if (startHour >= 5 && startHour <= 12) {
      const surchargeHours = 12 - startHour;
      if (surchargeHours > 0) {
        surcharge += surchargeHours * dataRoom.extraHour;
        notes.push(
          `Ph·ª• thu nh·∫≠n s·ªõm: ${surchargeHours} gi·ªù x ${dataRoom.extraHour.toLocaleString()} VNƒê`
        );
      }
    }

    const firstDayEnd = new Date(start);
    firstDayEnd.setDate(firstDayEnd.getDate() + 1);
    firstDayEnd.setHours(12, 0, 0, 0);

    if (end <= firstDayEnd) {
      total = dataRoom.daily;
      notes.push(`T√≠nh 1 ng√†y: ${dataRoom.daily.toLocaleString()} VNƒê`);
    } else {
      const lastNoon = new Date(end);
      lastNoon.setHours(12, 0, 0, 0);
      const fullDays = Math.round((lastNoon - firstDayEnd) / 86400000) + 1;
      total = fullDays * dataRoom.daily;
      notes.push(`${fullDays} ng√†y x ${dataRoom.daily.toLocaleString()} VNƒê`);
    }

    if (endHour >= 12) {
      const extraHours = endHour - 12;
      if (extraHours > 0) {
        surcharge += extraHours * dataRoom.extraHour;
        notes.push(
          `Ph·ª• thu tr·∫£ mu·ªôn: ${extraHours} gi·ªù x ${dataRoom.extraHour.toLocaleString()} VNƒê`
        );
      }
    }

    const holidayCounts = getHolidayDays(start, end, holidays);
    for (const name in holidayCounts) {
      holidaySurcharge += holidayCounts[name] * 100000;
      notes.push(`Qua ƒë√™m ng√†y l·ªÖ ${name}: +100,000 VNƒê`);
    }

    if (endHour >= 12) {
      const extraHours = endHour - 12;
      if (extraHours > 0) {
        const temp = new Date(start);
        while (temp <= end) {
          const currentStr = temp
            .toLocaleDateString("vi-VN", {
              day: "2-digit",
              month: "2-digit",
            })
            .replace(/\//g, "-");
          if (holidays[currentStr]) {
            holidayHours = extraHours;
            holidaySurcharge += extraHours * 10000;
            break;
          }
          temp.setHours(temp.getHours() + 1);
        }
      }
    }
  }

  if (holidayHours > 0) {
    notes.push(
      `Ph·ª• thu ${holidayHours} gi·ªù l·ªÖ x 10,000 VNƒê = ${(
        holidayHours * 10000
      ).toLocaleString()} VNƒê`
    );
  }

  if (holidaySurcharge > 0) {
    notes.push(`T·ªïng ph·ª• thu l·ªÖ: +${holidaySurcharge.toLocaleString()} VNƒê`);
  }

  total += surcharge + holidaySurcharge;

  notes.push(
    `üïì T·ªïng th·ªùi gian: ${
      diffMinutes >= 1440
        ? `${Math.floor(diffMinutes / 1440)} ng√†y${
            diffMinutes % 1440
              ? ` ${Math.floor((diffMinutes % 1440) / 60)} gi·ªù ${
                  diffMinutes % 60
                } ph√∫t`
              : ""
          }`
        : `${Math.floor(diffMinutes / 60)} gi·ªù ${diffMinutes % 60} ph√∫t`
    }`
  );

  notes.push(`üíµ T·ªïng ti·ªÅn: ${total.toLocaleString()} VNƒê`);

  return notes.join("\n");
};

module.exports = { handleRoomCommand };
